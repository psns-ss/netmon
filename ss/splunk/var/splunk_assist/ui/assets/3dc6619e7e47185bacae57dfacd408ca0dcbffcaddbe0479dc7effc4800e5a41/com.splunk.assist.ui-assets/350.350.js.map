{"version":3,"file":"350.350.js?cb75fb5dec593dc2c437","mappings":";8NAGO,MAAMA,EAAkB,KAC3B,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,eACrB,OAAO,oDAAgBD,EAAvB,6ICGG,MAAME,EAAsB,KAC/B,MAAM,KAAEC,IAASC,EAAAA,EAAAA,iBA0CjB,OACI,kBAAC,EAAAC,OAAD,mEACKC,EAAAA,GAAAA,KA3BW,EAChBC,OACAC,YACAC,iBACAC,mBACAC,qBAGI,kBAAC,EAAAC,MAAD,CACIC,IAAKN,EACLJ,KAASA,EAAL,IAAaI,EACjBO,OAASC,IACL,MACMC,EA5BH,EACfC,EACAR,EACAC,EACAC,KAEO,CACHO,MAAOD,EAAYC,MACnB,CAACT,GAAiBQ,EAAYR,GAC9BU,aAAcF,EAAYG,MAAOC,EAAAA,EAAAA,IAAkBJ,EAAYG,MAAkB,EACjFE,YAAaZ,EAAmBO,EAAYP,GAAoB,GAChEa,WAAYZ,EAAkBM,EAAYN,GAAmB,KAiBrCa,EADIC,EAAAA,EAAAA,IAAMV,EAAMW,SAASC,QAGrClB,EACAC,EACAC,GAEJ,OAAOiB,IAAAA,cAAoBpB,EAAW,CAAEQ,WAAxC,EAXR,sEAoBA,kBAAC,EAAAJ,MAAD,CAAOJ,UAAWT,EAAlB,oEAHR,uCC9CG,MAAM8B,GAAsBC,EAAAA,EAAAA,eAAmC,MAGzDC,EAAgC,EAAGC,cAGrC,kBAACH,EAAoBI,SAArB,CAA8BC,MAFhB,CAAC,EAEf,oMAAoDF,mICQxD,MAAMG,EAAuC,EAAGC,aAE/C,kBAACL,EAAD,mEACI,kBAAC,EAAA1B,OAAD,oEACI,kBAAC,EAAAO,MAAD,CACIT,KAAI,KAAOkC,EAAAA,GAAP,KAAyBC,EAAAA,GAAzB,IACJxB,OAASC,IACL,MAAME,GAAcQ,EAAAA,EAAAA,IAAMV,EAAMW,SAASC,QACnCX,EAAU,CACZuB,SAAUtB,EAAYsB,SACtBC,KAAM,CACFtB,MAAOD,EAAYwB,UACnBC,KAAMzB,EAAY0B,SAClBpC,KAAMU,EAAY2B,WAEtBzB,aAAcF,EAAYG,MACpBC,EAAAA,EAAAA,IAAkBJ,EAAYG,MAC9B,EACNyB,oBAAqB5B,EAAY4B,qBAGrC,IA5BON,EA4BoBvB,EAAQuB,aA1B5CO,EAAAA,GAAAA,QAAmBP,IAAyB,GA0BW,QAEnCtB,EAAYsB,SACnB,MAAMpC,GAAO4C,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,cAAaX,EAAAA,GAAe,CAAC,GAAIpB,GACxD,OAAO,kBAAC,EAAAgC,SAAD,CAAUC,GAAI/C,EAAd,mEACV,CAjCzB,IAA+BoC,EAmCP,OAAO,kBAACY,EAAA,EAAD,CAAUf,QAASA,EAASpB,QAASA,EAArC,mEAAP,EAxBR,oEA2BA,kBAAC,EAAAJ,MAAD,CAAOT,KAAI,IAAMiD,EAAAA,GAAjB,mEACI,kBAAClD,EAAD,sEAEJ,kBAAC,EAAA+C,SAAD,CAAUI,KAAK,IAAIH,GAAE,IAAMb,EAAAA,GAA3B,oEA/BJ,IAgCI,kBAAC,EAAAzB,MAAD,CAAOJ,UAAWT,EAAlB,sEAMhB","sources":["webpack://splunk-assist-main/./src/ui/common/components/errors/UnknownPath.tsx","webpack://splunk-assist-main/./src/ui/routers/InspectorRoutes.tsx","webpack://splunk-assist-main/./src/ui/common/providers/AssistFeatureFlagsProvider.tsx","webpack://splunk-assist-main/./src/ui/common/routing/AssistEnabledRoutes.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const UnknownPath: FC = () => {\n    const { pathname } = useLocation();\n    return <>Unknown path {pathname}</>;\n};\n","import React, { FC } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { UnknownPath } from '../common/components/errors/UnknownPath';\nimport { InspectorParams, Level } from '../common/types';\nimport { InspectorFilters } from '../inspectors/common/types/InspectorFilters';\nimport { parseSelectedPage, parse } from '../common/utils/url';\nimport { INSPECTORS } from '../common/utils/constants';\n\nexport const InspectorRoutes: FC = () => {\n    const { path } = useRouteMatch();\n\n    const getFilters = (\n        queryParams,\n        filterURLParam: string,\n        scopeFilterParam: string,\n        sortFilterParam: string\n    ): InspectorFilters => {\n        return {\n            level: queryParams.level as Level,\n            [filterURLParam]: queryParams[filterURLParam],\n            selectedPage: queryParams.page ? parseSelectedPage(queryParams.page as string) : 1,\n            scopeFilter: scopeFilterParam ? queryParams[scopeFilterParam] : '',\n            sortFilter: sortFilterParam ? queryParams[sortFilterParam] : '',\n        };\n    };\n\n    const createRoute = ({\n        name,\n        component,\n        filterURLParam,\n        scopeFilterParam,\n        sortFilterParam,\n    }): JSX.Element => {\n        return (\n            <Route\n                key={name}\n                path={`${path}/${name}`}\n                render={(props): JSX.Element => {\n                    const queryParams = parse(props.location.search) as InspectorParams;\n                    const filters = getFilters(\n                        queryParams,\n                        filterURLParam,\n                        scopeFilterParam,\n                        sortFilterParam\n                    );\n                    return React.createElement(component, { filters });\n                }}\n            />\n        );\n    };\n\n    return (\n        <Switch>\n            {INSPECTORS.map(createRoute)}\n            <Route component={UnknownPath} />\n        </Switch>\n    );\n};\n","import React, { createContext, FC, useContext } from 'react';\n\n// eslint-disable-next-line  @typescript-eslint/no-empty-interface\nexport interface FeatureFlags {}\n\nexport const FeatureFlagsContext = createContext<FeatureFlags | null>(null);\n\n// Prefix with 'Assist' because there is an existing SUI package with same name\nexport const AssistFeatureFlagProvider: FC = ({ children }) => {\n    const featureFlags = {};\n\n    return <FeatureFlagsContext.Provider value={featureFlags}>{children}</FeatureFlagsContext.Provider>;\n};\n\nexport const useFeatureFlags = (): FeatureFlags => {\n    const featureFlags = useContext(FeatureFlagsContext);\n    if (!featureFlags) {\n        throw new Error('useFeatureFlags must be called within AssistFeatureFlagProvider');\n    }\n    return featureFlags;\n};\n","import { RemoteProps } from '@splunk/splunk-assist-remote-api';\nimport React, { FC } from 'react';\nimport { generatePath, Redirect, Route, Switch } from 'react-router-dom';\nimport { Filters, Overview } from '../../overview/containers/Overview';\nimport { InspectorRoutes } from '../../routers/InspectorRoutes';\nimport { UnknownPath } from '../components/errors/UnknownPath';\nimport { joinQuery } from '../providers/NavUtilsProvider';\nimport { CATEGORIES, Category } from '../types';\nimport { DEPRECATED_PATH, INSPECTOR_PATH, OVERVIEW_PATH } from './routes';\nimport { parseSelectedPage, parse } from '../utils/url';\nimport { AssistFeatureFlagProvider } from '../providers/AssistFeatureFlagsProvider';\n\nfunction isValidCategoryFilter(category: string): boolean {\n    if (category) {\n        return CATEGORIES.indexOf(category as Category) >= 0;\n    }\n    return true;\n}\n\nexport const AssistEnabledRoutes: FC<RemoteProps> = ({ context }) => {\n    return (\n        <AssistFeatureFlagProvider>\n            <Switch>\n                <Route\n                    path={`(/${OVERVIEW_PATH}|/${DEPRECATED_PATH})`}\n                    render={(props): JSX.Element => {\n                        const queryParams = parse(props.location.search);\n                        const filters = {\n                            category: queryParams.category,\n                            node: {\n                                level: queryParams.nodeLevel,\n                                role: queryParams.nodeRole,\n                                name: queryParams.nodeTitle,\n                            },\n                            selectedPage: queryParams.page\n                                ? parseSelectedPage(queryParams.page as string)\n                                : 1,\n                            indicatorNameFilter: queryParams.indicatorNameFilter,\n                        } as Filters;\n\n                        if (!isValidCategoryFilter(filters.category)) {\n                            // if category filter is invalid, redirect to empty selection (i.e. \"all\")\n                            delete queryParams.category;\n                            const path = joinQuery(generatePath(OVERVIEW_PATH, {}), queryParams);\n                            return <Redirect to={path} />;\n                        }\n\n                        return <Overview context={context} filters={filters} />;\n                    }}\n                />\n                <Route path={`/${INSPECTOR_PATH}`}>\n                    <InspectorRoutes />\n                </Route>\n                <Redirect from=\"/\" to={`/${OVERVIEW_PATH}`} />;\n                <Route component={UnknownPath} />\n            </Switch>\n        </AssistFeatureFlagProvider>\n    );\n};\n\nexport default AssistEnabledRoutes;\n"],"names":["UnknownPath","pathname","useLocation","InspectorRoutes","path","useRouteMatch","Switch","INSPECTORS","name","component","filterURLParam","scopeFilterParam","sortFilterParam","Route","key","render","props","filters","queryParams","level","selectedPage","page","parseSelectedPage","scopeFilter","sortFilter","getFilters","parse","location","search","React","FeatureFlagsContext","createContext","AssistFeatureFlagProvider","children","Provider","value","AssistEnabledRoutes","context","OVERVIEW_PATH","DEPRECATED_PATH","category","node","nodeLevel","role","nodeRole","nodeTitle","indicatorNameFilter","CATEGORIES","joinQuery","generatePath","Redirect","to","Overview","INSPECTOR_PATH","from"],"sourceRoot":""}