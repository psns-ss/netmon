version: "3.8"
services:
  traefik:
    image: "traefik:v2.2"
    container_name: "traefik"
    command:
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--api.insecure=true"
      - "--entryPoints.web.address=:80"
      - "--accessLog"
    networks:
      - traefik-proxy
      - default
    ports:
      - "80:80"
      - "8090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    deploy:
      placement:
        constraints:
          - node.role == manager
    labels:
      - traefik.domain=${DOMAIN}

  backend:
    image: '${DOCKER_IMAGE_BACKEND}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    command:
      - "/start-reload.sh"
    volumes:
      - ./backend/app:/app
    environment:
      - SERVER_NAME=${DOMAIN}
      - SERVER_HOST=http://${DOMAIN}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-false}
    labels:
      - traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && ((PathPrefix(`/api/`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)))
      - traefik.http.routers.backend.entrypoints=web
      - traefik.enable=true
      - traefik.port=80
      - traefik.tags=${TRAEFIK_TAG}

  testclient:
    image: 'netmontestclient:${TAG-latest}'
    env_file:
      - .env
    command:
      - "/start-reload.sh"
    volumes:
      - ./backend/client:/app
    build:
      context: ./backend
      dockerfile: testclient.dockerfile
    labels:
      - traefik.http.routers.testclient.rule=PathPrefix(`/client-api/`)
      - traefik.http.routers.testclient.entrypoints=web
      - traefik.enable=true
      - traefik.port=80
      - traefik.tags=${TRAEFIK_TAG}

  celeryworker:
    image: '${DOCKER_IMAGE_CELERYWORKER}:${TAG-latest}'
    depends_on:
      - db
      - queue
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN}
      - SERVER_HOST=https://${DOMAIN}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-false}

  queue:
    image: rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #
    # You also have to change the flower command

  flower:
    image: mher/flower
    networks:
      - traefik-proxy
      - default
    env_file:
      - .env
    command:
      - "--broker=amqp://guest@queue:5672//"
      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
      # and change the queue service's image as well
      # - "--broker_api=http://guest:guest@queue:15672/api//"
    labels:
      - traefik.http.routers.flower.rule=Host(`flower.${DOMAIN}`)
      - traefik.http.routers.flower.entrypoints=web
      - traefik.enable=true
      - traefik.port=5555
      - traefik.tags=${TRAEFIK_PUBLIC_TAG}
      - traefik.docker.network=traefik-proxy

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND}:${TAG-latest}'
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-dev}
    labels:
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.enable=true
      - traefik.port=80
      - traefik.tags=${TRAEFIK_TAG}

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME}.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - traefik-proxy
      - default
    depends_on:
      - db
    env_file:
      - .env
    labels:
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.pgadmin.entrypoints=web
      - traefik.enable=true
      - traefik.port=80
      - traefik.tags=${TRAEFIK_PUBLIC_TAG}
      - traefik.docker.network=traefik-proxy

volumes:
  app-db-data:

networks:
  traefik-proxy:
    name: traefik-proxy
