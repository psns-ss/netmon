{"version":3,"file":"631.631.js?6cc949bb9cc6f4376284","mappings":";sLAIO,SAASA,EAA4BC,GACxC,MAAO,CACHC,SAAUC,MAAOC,EAAMC,KACnB,IACI,IAAKA,EACD,MAAM,IAAIC,EAAAA,EAAa,OAAQ,WAAY,iBAAkB,KAEjE,MAAMC,QAAiBN,EAAUO,KAAK,WAAY,CAC9CC,OAAQ,OACRC,KAAM,iBACNC,KAAM,CACFP,OACAQ,WAAYP,KAGpB,GAAwB,aAApBE,EAASM,QAA6C,WAApBN,EAASM,OAC3C,MAAO,CACHC,QAAS,4DACTC,OAAO,EAGlB,CAAC,MAAOC,GACL,GAAIA,aAAiBV,EAAAA,EACjB,MAAO,CACHF,KAAMY,EAAMH,OACZE,OAAO,EAGlB,CACD,MAAO,CACHX,KAAM,KACNW,OAAO,EAFX,EAKJE,mBAAoBd,UAAY,YAC5B,MAAMI,QAAiBN,EAAUiB,IAAI,iBAAkB,CACnDT,OAAQ,MACRC,KAAM,wBAEV,MAAO,CACHS,iBAAgB,SAAEZ,EAASa,cAAX,EAAE,EAAkBC,qBACpCC,YAAW,SAAEf,EAASa,cAAX,EAAE,EAAkBG,aAC/BC,aAAY,SAAEjB,EAASa,cAAX,EAAE,EAAkBK,cAChCC,cAAenB,EAASoB,eACxBC,eAAc,SAAErB,EAASa,cAAX,EAAE,EAAkBS,UALtC,EASX,oCC/CM,SAASC,EAA0B7B,GACtC,MAAO,CACH8B,eAAgB5B,UACZ,IACI,MAAMI,QAAiBN,EAAUiB,IAAI,iBAAkB,CACnDT,OAAQ,MACRC,KAAM,sBACNsB,YAAa,CACTC,YAAa,WAGf,QAAEC,GAAY3B,EAAS4B,MAAM,GAG7BC,EAAaC,IACfH,EAAQI,SACR,CAACC,EAAOC,KAAU,MAId,OAHA,MAAIA,GAAJ,SAAIA,EAAOC,aAAP,EAAmBC,MACnBH,EAAMI,KAAKH,EAAMC,WAAWC,MAEzBH,CAAP,GAEJ,IAOJ,OAHoBL,EAAQQ,KAAKE,QAAQF,IAAUN,EAAWS,SAASH,KAGpD,GAAGI,aACzB,CAAC,MACE,OAAO,IACV,GAGZ,CCrCM,SAASC,EAAsB9C,GAClC,MAAO,CACH+C,aAAc7C,UACV,IASI,aARuBF,EAAUiB,IAAI,eAAgB,CACjDT,OAAQ,MACRC,KAAM,0BACNsB,YAAa,CACTC,YAAa,WAGGE,MAAMc,MAAMC,GAAyB,oBAAfA,EAAMC,OACtCjB,OACjB,CAAC,MAAOkB,GACL,MAAO,YACV,GAGZ,CCjBM,SAASC,EAAwBpD,GACpC,MAAO,CACHqD,kBAAmBnD,UACf,IACI,MAAMI,QAAiBN,EAAUiB,IAAI,oBAAqB,CACtDT,OAAQ,MACRC,KAAM,iCACNsB,YAAa,CACTC,YAAa,WAGf,QAAEC,GAAY3B,EAAS4B,MAAM,GAGnC,MAAO,CAAEoB,SAAQ,MAAErB,OAAF,EAAEA,EAASqB,SAAUC,MAAK,MAAEtB,OAAF,EAAEA,EAASsB,MACzD,CAAC,MACE,OAAO,IACV,GAGZ,CCVM,MAAMC,GAAkBC,EAAAA,EAAAA,eAA+B,MAEjDC,EAAsB,EAAGC,eAClC,MAAMC,GAAqBC,EAAAA,EAAAA,UAAQ,ICVL,MAC9B,MAAM7D,EAAY,IAAI8D,EAAAA,EAAU,CAAEC,cAAc,IAChD,MAAO,CACHC,kBAAmBjE,EAA4BC,GAC/CiE,gBAAiBpC,EAA0B7B,GAC3CkE,YAAapB,EAAsB9C,GACnCmE,cAAef,EAAwBpD,GAJ3C,EDQyCoE,IAAsB,IAE/D,OAAO,kBAACZ,EAAgBa,SAAjB,CAA0BpB,MAAOW,EAAjC,yLAA4CD,EAAnD,EAGSW,EAAc,KACvB,MAAMV,GAAWW,EAAAA,EAAAA,YAAWf,GAC5B,IAAKI,EACD,MAAM,IAAIY,MAAM,qDAEpB,OAAOZ,CAAP,mEE3BG,MAAMa,EAA2B,UAC3BC,EAA2B,UAC3BC,EAA6B,4PCAnC,SAASC,EACZC,EACAC,GAEA,MAAMC,GAAcC,EAAAA,EAAAA,UACdC,GAAgBD,EAAAA,EAAAA,QAAOH,GAa7B,OAZAK,EAAAA,EAAAA,YAAU,KACND,EAAcE,QAAUN,CAAxB,GACD,CAACA,KAEJK,EAAAA,EAAAA,YAAU,KAGN,GAAc,OAAVJ,EAEA,OADAC,EAAYI,QAAUC,OAAOC,aAHpB,IAAYJ,EAAcE,WAGYL,GACxC,IAAYM,OAAOE,cAAcP,EAAYI,QACvD,GACF,CAACL,IACGC,CACV,sFChBM,MAAMQ,EAAyBC,IAAAA,IAAH,0HAOtBC,EAAgBD,IAAOE,IAAPF,CAAH,6CACRG,EAAAA,QAAAA,cAGLC,EAAaJ,IAAOE,IAAPF,CAAH,wDAEVG,EAAAA,QAAAA,qBAGAE,EAA0BL,IAAOM,IAAPN,CAAH,4CACnBG,EAAAA,QAAAA,eChBV,IAAKI,YAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,gBAAAA,GAAAA,kBAAAA,EAAAA,EAAAA,UAAAA,GAAAA,aAAAA,IAAAA,EAAAA,CAAAA,IAQZ,MAAMC,EAAyB,2BACzBC,EAAwB,8BAmBxBC,EAAuD,CACzDC,MAAOH,EACPnF,QAAS,sCAGAuF,EAAyB,CAnBoB,CACtDD,MAAOH,EACPnF,QAASoF,EACTI,WAAY,gDAEiD,CAC7DF,MAAOH,EACPnF,QAAS,wCAE8C,CACvDsF,MAAOH,EACPnF,QAAS,sCACTwF,WAAY,iCAWZH,sKCpBG,SAASI,EACZjF,EACAE,EACAE,GAEA,IAAKA,EAAe,CAChB,GAAIF,IAAiBgF,EAAAA,GAAAA,QACjB,OAAIlF,IAAgBmF,EAAAA,GAAAA,QACTT,EAAuBU,OAE3BV,EAAuBW,QAElC,IACKnF,IAAiBgF,EAAAA,GAAAA,UAA8BhF,IAAiBgF,EAAAA,GAAAA,SACjElF,IAAgBmF,EAAAA,GAAAA,QAEhB,OAAOT,EAAuBY,eAErC,CACD,OAAIpF,IAAiBgF,EAAAA,GAAAA,QAA4B9E,EACtCsE,EAAuBa,UAE3Bb,EAAuBU,MACjC,CASM,MAAMI,EAA4D,EAAGC,0BACxE,MAIOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,IAC1CC,EAAqBC,IAAwBF,EAAAA,EAAAA,WAAS,IAGvD,YAAE5F,EAAF,aAAeE,EAAf,cAA6BE,IAAkB2F,EAAAA,EAAAA,MAG/CC,EAAkBf,EAA0BjF,EAAaE,EAAcE,GAGvE6F,EDdH,SACHC,EACAC,GAEA,OAAQD,GACJ,KAAKxB,EAAuBW,QACxB,MAAO,CACHP,MAAOH,EACPnF,QAASoF,EACTI,WAAY,gDAEpB,KAAKN,EAAuBU,OACxB,OArBL,SAAuCe,GAC1C,OAAIA,GAASpB,EAAuBqB,OACzBvB,EAEJE,EAAuBoB,EACjC,CAgBkBE,CAA8BF,GACzC,KAAKzB,EAAuBY,gBACxB,MAAO,CACHR,MAAOH,EACPnF,QAAS,4CACTwF,WAAY,mCAEpB,QACI,MAAO,CACHF,MAAOH,EACPnF,QAASoF,EACTI,WAAY,6CAG3B,CCZ+BsB,CAA4BN,EAAiBN,GAuBzE,OApBAnC,EAAYkC,EAjBoB,KAsBhClC,GAAY,KAEJyC,IAAoBtB,EAAuBU,QAC3CM,EAAeX,EAAuBqB,QAEtCT,EAAgBD,EAAe,EAClC,GA3BsB,KAgC3BnC,GAAY,KACRuC,GAAqB,EAArB,GAhCiB,MAoCjB,kBAAC5B,EAAD,mEACI,kBAAC,IAAD,CAAaqC,KAAK,QAAlB,oEACA,kBAACnC,EAAD,CAAeoC,MAAO,EAAGC,MAAO,CAAEC,MAAO,SAAzC,yEACKT,OADL,EACKA,EAAqBnB,OAE1B,kBAACP,EAAD,CAAYiC,MAAO,EAAnB,0EAAuBP,OAAvB,EAAuBA,EAAqBzG,SAC5C,kBAAC+E,EAAD,CAAYiC,MAAO,EAAnB,0EAAuBP,OAAvB,EAAuBA,EAAqBjB,YAC3Ca,GACG,oCACI,6FACA,kBAACtB,EAAD,CAAYiC,MAAO,EAAnB,oIAGA,kBAACjC,EAAD,CAAYiC,MAAO,EAAnB,wFACsB,IAClB,kBAAChC,EAAD,CACImC,IAAIC,EAAAA,EAAAA,IAAc,mCAClBC,kBAAgB,EAFpB,yFAhBpB,2LCnFG,MAAMC,EAAuB,IAChC,kBAAC,IAAD,CAAc,YAAU,oBAAxB,kEACI,kBAAC,IAAD,CAAaP,KAAM,GAAnB,mEACA,kBAAC,KAAD,mEACI,kBAAC,KAAD,CAAcC,MAAO,EAArB,wFACA,kBAAC,KAAD,qHACA,kBAAC,KAAD,oEACI,kBAAC,IAAD,CACIG,GAAG,6EACHI,WAAW,UACXF,kBAAgB,EAHpB,kPCIhB,MAAMG,GAAsBC,EAAAA,EAAAA,OAAK,IAAM,iCAEjCC,GAAuBD,EAAAA,EAAAA,OAAK,IAAM,yDAElCE,GAAa,IACf,kBAACC,EAAA,EAAD,CAAQ,YAAU,SAAlB,kEACI,kBAAC,IAAD,CAAab,KAAK,QAAlB,oEASFc,GAAgBlD,IAAOmD,IAAPnD,CAAH,2HACCG,EAAAA,UAAAA,aACCA,EAAAA,UAAAA,aACFA,EAAAA,UAAAA,cACKA,EAAAA,UAAAA,yBAGlBiD,GAAepD,IAAAA,IAAH,6CAUZqD,GAAwB,QACxBC,GAAyB,OACzBC,GAA4B,oBAErBC,GAAkC,iCAElCC,GAA6B,EAAG9H,UAAS+H,aAClD,MAAM,YAAE7H,EAAF,aAAe8H,EAAf,OAA6BC,EAA7B,aAAqC7H,EAArC,cAAmDE,IAAkB2F,EAAAA,EAAAA,OACpEiC,EAAqBC,IAA0BrC,EAAAA,EAAAA,UAClDsC,eAAeC,QAAQT,KAA8BD,IAEnDW,GAAwBC,EAAAA,EAAAA,cAAY,KACtCH,eAAeI,QAAQZ,GAA2BF,IAClDS,EAAuBT,GAAvB,GACD,KAEIe,EAAiBC,IAAsB5C,EAAAA,EAAAA,UAC1CsC,eAAeC,QAAQR,KAAoCvE,EAAAA,IAQ/D,OAAIqF,EAAAA,EAAAA,IAAeX,GACR,kBAACX,GAAD,qEAGPuB,EAAAA,GAAAA,SAA+BxI,GACxB,kBAAC4G,EAAD,qEAIL1G,GAAiBJ,IAAgBmF,EAAAA,GAAAA,UACnCoD,IAAoBjF,EAAAA,GAzC5B,SAAmBtD,EAA6BE,EAA4BE,GAExE,OADc6E,EAA0BjF,EAAaE,EAAcE,KAClDsE,EAAuBa,SAC3C,CAoDOoD,CAAU3I,EAAaE,EAAcE,GAEjC,kBAACgH,EAAA,EAAD,qEACI,kBAAC5B,EAAD,CAAyBC,oBAAqBsC,EAA9C,sEAMR,kBAAC,EAAAa,SAAD,CAAUC,SAAU,kBAAC1B,GAAD,sEAApB,mEACKa,IAAwBP,IACrB,kBAACJ,GAAD,CACI,YAAU,iBACVN,WAAW,SACX+B,gBAAiBV,EACjBW,KAAK,OAJT,uIASJ,kBAACxB,GAAD,qEACI,kBAACP,EAAD,CAAqBlH,QAASA,EAAS+H,OAAQA,EAA/C,uEAhCJ,kBAAC,EAAAe,SAAD,CAAUC,SAAU,kBAAC1B,GAAD,qEAApB,mEACI,kBAACD,EAAD,CACIpH,QAASA,EACT+H,OAAQA,EACRU,gBAAiBA,EACjBS,mBAvBiB9C,IAC7BgC,eAAeI,QAAQX,GAAiCzB,GACxDsC,EAAmBtC,EAAnB,EAiBQ,oEAkBZ,0CC7DG,MAAM+C,GAAqB,EAAG3G,eACjC,MAAM4G,EA3CV,WACI,MAAMC,GAAcC,EAAAA,GAAAA,oBAEhBzG,mBAAmB,mBAAEhD,KACrBsD,EAAAA,GAAAA,OAEGoG,EAAaC,IAAkB1D,EAAAA,EAAAA,UAAS,IAEzC,aAAEkC,EAAF,MAAgBlG,IAAU2H,EAAAA,EAAAA,IAC5BJ,EACA,2CACAxJ,EACA,CAAE6J,aAAa,EAAOH,gBAEpBtB,GAASM,EAAAA,EAAAA,cAAY,KACvBiB,GAAgBG,GAASA,EAAMC,OAAOC,iBAAmB,GAAKF,EAAM,EAAI,GAAxE,GACD,IAuBH,OArBiCjH,EAAAA,EAAAA,UAC7B,KAAM,CACF3C,kBAAuB,MAAL+B,OAAA,EAAAA,EAAO/B,oBAAoB,EAC7CiI,eACAC,SACA/H,aAAkB,MAAL4B,OAAA,EAAAA,EAAO5B,cAAemF,EAAAA,GAAAA,QACnCjF,cAAmB,MAAL0B,OAAA,EAAAA,EAAO1B,eAAgB,UACrCE,eAAoB,MAALwB,OAAA,EAAAA,EAAOxB,iBAAiB,EACvCE,gBAAqB,MAALsB,OAAA,EAAAA,EAAOtB,kBAAkB,KAE7C,OACIsB,OADJ,EACIA,EAAO/B,iBADX,MAEI+B,OAFJ,EAEIA,EAAO5B,YAFX,MAGI4B,OAHJ,EAGIA,EAAO1B,aACP4H,EACAC,EALJ,MAMInG,OANJ,EAMIA,EAAOxB,cANX,MAOIwB,OAPJ,EAOIA,EAAOtB,gBAKlB,CAGkBsJ,GACf,OAAO,kBAACC,EAAA,YAAD,CAAwBjI,MAAOsH,EAA/B,+LAAwC5G,EAA/C,8BCnDG,SAASwH,GAAWC,GACvB,GAAIA,EAEA,OAIJ,MAAM3K,EAAO2E,OAAOiG,SAASC,SAC7B,GAAI7K,EAAM,CACN,MAAM8K,EAAQ9K,EAAK+K,MAAM,KACzB,GAAID,EAAM9D,OAAS,EACf,OAAO8D,EAAME,OAAS,EAE7B,CAEJ,mECXIC,aAAAA,GAAAA,EAAAA,WAAAA,OAAAA,EAAAA,WAAAA,OAAAA,EAAAA,QAAAA,SAAAA,KAAAA,GAAAA,CAAAA,IAME,MAgDMC,GAAqB,CAACC,EAAsBC,MAE7BA,GAAWC,UACnBC,iBAAiB,SAAU5I,GAvBhB,EAAC6I,EAAmCJ,KAC/D,IAAIK,EAAY,GACZC,EAAcF,EAClB,KAAOE,GAAa,OAChB,GAAIA,EAAYC,QAAQC,cAAe,CACnCH,EAAYC,EAAYC,QAAQC,cAChC,KACH,CACDF,EAAW,SAAGA,QAAH,EAAG,EAAaG,aAC9B,CAED,GAAIJ,EAAW,CACX,QAAqCK,KAAKC,MAAMN,IAA1C,UAAEO,GAAR,EAAsBC,GAAtB,cACA,IAAKD,EACD,OAEK,MAATZ,GAAAA,EAAWc,MAAMF,EAAWC,EAC/B,GAMgDE,CAAgBxJ,EAAEyJ,OAAuBhB,IAA1F,ECxDSiB,IAFmBpJ,EAAAA,EAAAA,eAAqC,CAAC,GAEbY,gICSlD,MAAMyI,GAAgD,EAAGC,mBAAkBpJ,eAC9E,MAAM,YAAEO,EAAF,cAAeC,IAAkBG,EAAAA,GAAAA,OAEhC0I,EAAQC,IAAahG,EAAAA,EAAAA,WAAS,GAC/BiG,GAAclI,EAAAA,EAAAA,QAAuB,MAGrCwF,GAAcC,EAAAA,GAAAA,mBACd0C,GAAcvC,EAAAA,EAAAA,KAChBlB,EAAAA,EAAAA,cAAY,IACD,QACR,IACH,iCACAA,EAAAA,EAAAA,cAAY,IACDvF,EAAcd,qBACtB,CAACc,KAIFiJ,GAAYxC,EAAAA,EAAAA,IACdJ,EACA,yCACAd,EAAAA,EAAAA,cAAY,IACDxF,EAAYnB,gBACpB,CAACmB,KAGF0H,EAAYmB,OAAmBM,EF/BVD,KAEDvJ,EAAAA,EAAAA,UAAQ,KAC9B,MAAMyJ,EAAM5B,GAA4B0B,GACxC,QAAYC,IAARC,EACA,OAGJ,MAAM1B,GAAY2B,EAAAA,GAAAA,mBAEZC,GAAmBC,EAAAA,GAAAA,wBAAuB,CAG5CC,QAAS,KACTC,QAAS,0BACTC,YAAaN,EACbO,iBAAiB,EACjBC,0BAA0B,EAC1BC,yBAAyB,IAI7B,OAFAnC,EAAUoC,UAAUR,GAEb5B,CAAP,GACD,CAACwB,IEQ6Ca,CAAeb,EAAUnK,OAAS,IAanF,OAZAiC,EAAAA,EAAAA,YAAU,KAAM,MACR0G,IAAcoB,GAAd,SAAwBG,EAAYlK,QAAZ,EAAmBM,QAC3CqI,EAAUsC,SAAS,CAEfC,OAAQ/I,OAAOiG,SAAS+C,KACxBC,KAAMlB,EAAYlK,MAAMM,QAE5BoI,GAAmBC,EAAWsB,EAAY/H,SAC1C8H,GAAU,GACb,GACF,CAACrB,EAAWuB,EAAaF,EAAWD,IAGnC,kBAACH,GAAD,CAA0B5J,MAAO,CAAE2I,aAAnC,mEACI,yBAAK0C,IAAKpB,EAAV,oEAAwBvJ,GAFhC,qHC1CG,MAAM4K,GAAgC,EAAGpN,UAAS+H,aACrD,MAAMsF,GAAUC,EAAAA,EAAAA,cAGhB,OACI,kBAAC/K,GAAA,GAAD,oEACI,kBAACgL,GAAA,GAAD,CAAcC,UAAW,CAAE5K,cAAc,EAAOoK,OAAQhD,GAAWhK,EAAQiK,OAA3E,oEACI,kBAACwD,GAAA,GAAD,CAAkBJ,QAASA,EAA3B,oEACI,kBAACK,GAAA,EAAD,CAASC,YAAY,OAArB,oEACI,kBAAChC,GAAD,CAAmBC,iBAAkB7D,EAArC,oEACI,kBAACoB,GAAD,qEACI,kBAACrB,GAAD,CAAW9H,QAASA,EAAS+H,OAAQA,EAArC,0EAP5B,EAiBS6F,GAAiCC,GAEtC,kBAAC,EAAAC,WAAD,oEACI,kBAACV,IAAD,UAAkBS,EAAlB,wEAKZ","sources":["webpack://splunk-assist-main/./src/http/services/httpSupervisorService.ts","webpack://splunk-assist-main/./src/http/services/httpLicencerService.ts","webpack://splunk-assist-main/./src/http/services/httpConfService.ts","webpack://splunk-assist-main/./src/http/services/httpAccessService.ts","webpack://splunk-assist-main/./src/ui/common/providers/ServiceProvider.tsx","webpack://splunk-assist-main/./src/http/services/index.ts","webpack://splunk-assist-main/./src/ui/onboarding/common/OnboardingState.ts","webpack://splunk-assist-main/./src/ui/common/hooks/useInterval.ts","webpack://splunk-assist-main/./src/ui/onboarding/components/AssistPendingActivation/AssistPendingActivation.styles.ts","webpack://splunk-assist-main/./src/ui/onboarding/components/AssistPendingActivation/AssistPendingDetails.tsx","webpack://splunk-assist-main/./src/ui/onboarding/components/AssistPendingActivation/AssistPendingActivation.tsx","webpack://splunk-assist-main/./src/ui/onboarding/components/ActivationFailed.tsx","webpack://splunk-assist-main/./src/ui/common/components/AssistApp.tsx","webpack://splunk-assist-main/./src/ui/common/providers/Assist/AssistProvider.tsx","webpack://splunk-assist-main/./src/ui/common/utils/tenant.ts","webpack://splunk-assist-main/./src/telemetry/utils.ts","webpack://splunk-assist-main/./src/telemetry/TelemetryContext.tsx","webpack://splunk-assist-main/./src/telemetry/TelemetryProvider.tsx","webpack://splunk-assist-main/./src/ui/routers/AssistRouter.tsx"],"sourcesContent":["import { RequestError } from '../../ui/common/repos/RequestError';\nimport { SupervisorService } from '../../ui/common/services/supervisorService';\nimport { APIClient } from '../api/APIClient';\n\nexport function createHttpSupervisorService(apiClient: APIClient): SupervisorService {\n    return {\n        activate: async (code, licenseId) => {\n            try {\n                if (!licenseId) {\n                    throw new RequestError('POST', 'activate', 'assist/onboard', 404);\n                }\n                const response = await apiClient.post('activate', {\n                    method: 'POST',\n                    path: 'assist/onboard',\n                    body: {\n                        code,\n                        license_id: licenseId,\n                    },\n                });\n                if (response.status === 'creating' || response.status === 'active') {\n                    return {\n                        message: 'Your account was successfully linked with your deployment',\n                        valid: true,\n                    };\n                }\n            } catch (error) {\n                if (error instanceof RequestError) {\n                    return {\n                        code: error.status,\n                        valid: false,\n                    };\n                }\n            }\n            return {\n                code: null,\n                valid: false,\n            };\n        },\n        getIsAssistEnabled: async () => {\n            const response = await apiClient.get('getOptinStatus', {\n                method: 'GET',\n                path: 'assist/optin_status',\n            });\n            return {\n                connectivityOpen: response.context?.network_connectivity,\n                optinStatus: response.context?.assist_optin,\n                tenantStatus: response.context?.tenant_status,\n                assistEnabled: response.assist_enabled,\n                sudOptinStatus: response.context?.sud_optin,\n            };\n        },\n    } as SupervisorService;\n}\n","import reduce from 'lodash/reduce';\nimport { APIClient } from '../api/APIClient';\nimport { LicenserService } from '../../ui/common/services/licencerService';\n\n/* eslint-disable camelcase */\nexport function createHTTPLicenserService(apiClient: APIClient): LicenserService {\n    return {\n        getLicenseGUID: async () => {\n            try {\n                const response = await apiClient.get('getLicenseInfo', {\n                    method: 'GET',\n                    path: 'licenser/localslave',\n                    queryParams: {\n                        output_mode: 'json',\n                    },\n                });\n                const { content } = response.entry[0];\n\n                // retrieve addon license guids\n                const addonGuids = reduce(\n                    content.add_ons,\n                    (guids, addon) => {\n                        if (addon?.parameters?.guid) {\n                            guids.push(addon.parameters.guid);\n                        }\n                        return guids;\n                    },\n                    [] as string[]\n                );\n\n                // filter out add on licenses\n                const licenseGUID = content.guid.filter((guid) => !addonGuids.includes(guid));\n\n                // return the first valid license in the array\n                return licenseGUID[0].toLowerCase();\n            } catch {\n                return null;\n            }\n        },\n    } as LicenserService;\n}\n","import { ConfService } from '../../ui/common/services/confService';\nimport { APIClient } from '../api/APIClient';\n\nexport function createHTTPConfService(apiClient: APIClient): ConfService {\n    return {\n        getAssistEnv: async () => {\n            try {\n                const response = await apiClient.get('getAssistEnv', {\n                    method: 'GET',\n                    path: 'properties/assist/cloud',\n                    queryParams: {\n                        output_mode: 'json',\n                    },\n                });\n                const scsEnv = response.entry.find((value) => value.name === 'scs_environment');\n                return scsEnv.content;\n            } catch (e) {\n                return 'production';\n            }\n        },\n    } as ConfService;\n}\n","import { APIClient } from '../api/APIClient';\nimport { AccessService } from '../../ui/common/services/accessService';\n\n/* eslint-disable camelcase */\nexport function createHTTPAccessService(apiClient: APIClient): AccessService {\n    return {\n        getCurrentContext: async () => {\n            try {\n                const response = await apiClient.get('getCurrentContext', {\n                    method: 'GET',\n                    path: 'authentication/current-context',\n                    queryParams: {\n                        output_mode: 'json',\n                    },\n                });\n                const { content } = response.entry[0];\n\n                // retrieve user name and email\n                return { username: content?.username, email: content?.email };\n            } catch {\n                return null;\n            }\n        },\n    } as AccessService;\n}\n","import React, { createContext, FC, useContext, useMemo } from 'react';\nimport { createHttpServices } from '../../../http/services';\nimport { SupervisorService } from '../services/supervisorService';\nimport { LicenserService } from '../services/licencerService';\nimport { ConfService } from '../services/confService';\nimport { AccessService } from '../services/accessService';\n\nexport interface Services {\n    supervisorService: SupervisorService;\n    licenserService: LicenserService;\n    confService: ConfService;\n    accessService: AccessService;\n}\n\nexport const ServicesContext = createContext<Services | null>(null);\n\nexport const ServiceProvider: FC = ({ children }) => {\n    const services: Services = useMemo(() => createHttpServices(), []);\n\n    return <ServicesContext.Provider value={services}>{children}</ServicesContext.Provider>;\n};\n\nexport const useServices = (): Services => {\n    const services = useContext(ServicesContext);\n    if (!services) {\n        throw new Error('useServices must be called within ServiceProvider');\n    }\n    return services;\n};\n","import { createHttpSupervisorService } from './httpSupervisorService';\nimport { APIClient } from '../api/APIClient';\nimport { Services } from '../../ui/common/providers/ServiceProvider';\nimport { createHTTPLicenserService } from './httpLicencerService';\nimport { createHTTPConfService } from './httpConfService';\nimport { createHTTPAccessService } from './httpAccessService';\n\nexport const createHttpServices = (): Services => {\n    const apiClient = new APIClient({ shouldUseSCS: false });\n    return {\n        supervisorService: createHttpSupervisorService(apiClient),\n        licenserService: createHTTPLicenserService(apiClient),\n        confService: createHTTPConfService(apiClient),\n        accessService: createHTTPAccessService(apiClient),\n    };\n};\n","export const ONBOARDING_STATE_PENDING = 'pending';\nexport const ONBOARDING_STATE_RUNNING = 'running';\nexport const ONBOARDING_STATE_COMPLETED = 'completed';\n","import { useEffect, useRef, MutableRefObject } from 'react';\n\nexport function useInterval(\n    callback: () => void,\n    delay: number | null\n): MutableRefObject<number | undefined> {\n    const intervalRef = useRef<number>();\n    const savedCallback = useRef(callback);\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    // eslint-disable-next-line consistent-return\n    useEffect(() => {\n        const tick = (): void => savedCallback.current();\n\n        if (delay !== null) {\n            intervalRef.current = window.setInterval(tick, delay);\n            return (): void => window.clearInterval(intervalRef.current);\n        }\n    }, [delay]);\n    return intervalRef;\n}\n","import styled from 'styled-components';\nimport variables from '@splunk/themes/variables';\nimport Heading from '@splunk/react-ui/Heading';\nimport Link from '@splunk/react-ui/Link';\n\nexport const AssistPendingContainer = styled.div`\n    display: flex;\n    flex-flow: column;\n    align-content: center;\n    align-items: center;\n`;\n\nexport const StyledHeading = styled(Heading)`\n    margin-top: ${variables.spacingLarge};\n`;\n\nexport const Subheading = styled(Heading)`\n    margin: 0;\n    color: ${variables.contentColorDefault};\n`;\n\nexport const ContactSupportLinkStyle = styled(Link)`\n    font-size: ${variables.fontSizeLarge};\n`;\n","export interface PendingActivationDetails {\n    title: string;\n    message: string;\n    altMessage?: string;\n}\n\nexport enum PendingActivationState {\n    INITIAL,\n    OPT_IN,\n    TENANT_CREATING,\n    COMPLETED,\n}\n\n// This will show for the title of every message.\nconst pendingActivationTitle = 'Splunk Assist is loading';\nconst activatingAssistTitle = 'Activating Splunk Assist...';\n/**\n * These are the rotating messages that appear to the user while\n * waiting for tenant_status to go from \"unknown\" to \"creating\"\n * */\nconst activatingAssistDetails: PendingActivationDetails = {\n    title: pendingActivationTitle,\n    message: activatingAssistTitle,\n    altMessage: 'This could take a few moments, stay tuned...',\n};\nconst connectingCloudServicesDetails: PendingActivationDetails = {\n    title: pendingActivationTitle,\n    message: 'Connecting to Splunk cloud services…',\n};\nconst onboardingRequestDetails: PendingActivationDetails = {\n    title: pendingActivationTitle,\n    message: 'Connected to Splunk cloud services.',\n    altMessage: 'Sending onboarding request...',\n};\nconst securingConnectionsDetails: PendingActivationDetails = {\n    title: pendingActivationTitle,\n    message: 'Establishing secure connections...',\n};\n\nexport const optInActivationDetails = [\n    activatingAssistDetails,\n    connectingCloudServicesDetails,\n    onboardingRequestDetails,\n    securingConnectionsDetails,\n];\n\n// This function handles the request to get the next optIn details message\nexport function getNextOptInActivationDetails(index: number): PendingActivationDetails {\n    if (index >= optInActivationDetails.length) {\n        return securingConnectionsDetails;\n    }\n    return optInActivationDetails[index];\n}\n\n// Function that returns each pending activation message for the UI\n// based on the activation state.\nexport function getPendingActivationDetails(\n    state: PendingActivationState,\n    index: number\n): PendingActivationDetails {\n    switch (state) {\n        case PendingActivationState.INITIAL:\n            return {\n                title: pendingActivationTitle,\n                message: activatingAssistTitle,\n                altMessage: 'This could take a few moments, stay tuned...',\n            } as PendingActivationDetails;\n        case PendingActivationState.OPT_IN:\n            return getNextOptInActivationDetails(index);\n        case PendingActivationState.TENANT_CREATING:\n            return {\n                title: pendingActivationTitle,\n                message: 'Secure connections have been established.',\n                altMessage: 'Provisioning cloud resources...',\n            } as PendingActivationDetails;\n        default:\n            return {\n                title: pendingActivationTitle,\n                message: activatingAssistTitle,\n                altMessage: 'This could take a few moments, stay tuned',\n            } as PendingActivationDetails;\n    }\n}\n","import WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport React, { FC, useState } from 'react';\nimport { createDocsURL } from '@splunk/splunk-utils/url';\nimport { useInterval } from '../../../common/hooks/useInterval';\nimport { AssistStatuses, useAssist } from '../../../common/providers/Assist/AssistContext';\nimport { TenantStatus, TenantStatusState } from '../../../common/types';\nimport {\n    AssistPendingContainer,\n    StyledHeading,\n    Subheading,\n    ContactSupportLinkStyle,\n} from './AssistPendingActivation.styles';\nimport {\n    optInActivationDetails,\n    PendingActivationState,\n    getPendingActivationDetails,\n} from './AssistPendingDetails';\n\nexport interface AssistPendingActivationProps {\n    reloadAssistContext: () => void;\n}\n\n// This is state machine to determine what the current pending activation state is.\nexport function getPendingActivationState(\n    optinStatus: AssistStatuses,\n    tenantStatus: TenantStatus,\n    assistEnabled: boolean\n): PendingActivationState {\n    if (!assistEnabled) {\n        if (tenantStatus === TenantStatusState.UNKNOWN) {\n            if (optinStatus === AssistStatuses.ENABLED) {\n                return PendingActivationState.OPT_IN;\n            }\n            return PendingActivationState.INITIAL;\n        }\n        if (\n            (tenantStatus === TenantStatusState.CREATING || tenantStatus === TenantStatusState.ACTIVE) &&\n            optinStatus === AssistStatuses.ENABLED\n        ) {\n            return PendingActivationState.TENANT_CREATING;\n        }\n    }\n    if (tenantStatus === TenantStatusState.ACTIVE && assistEnabled) {\n        return PendingActivationState.COMPLETED;\n    }\n    return PendingActivationState.OPT_IN;\n}\n\n/**\n * Pending activation can take some time so we are updating the UI with different\n * messages so that user knows that things are happening. This code will rotate\n * messages from AssistPendingOptinDetails file while commerce is creating and\n * activating the tenant. Once tenant status changes to \"creating\", anything after\n * that, that is not \"active\", will be treated like an error.\n */\nexport const AssistPendingActivation: FC<AssistPendingActivationProps> = ({ reloadAssistContext }) => {\n    const requestOptInStatusTimer = 5000; // 5 seconds\n    const rotateMessageTimer = 20000; // 15 seconds\n    const timeOutTimer = 180000; // 3 minute timer for inactivity\n\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [isActivationDelayed, setActivationDelayed] = useState(false);\n\n    // Get the current pending activation values\n    const { optinStatus, tenantStatus, assistEnabled } = useAssist();\n\n    // Using the current activation values, find activation state\n    const activationState = getPendingActivationState(optinStatus, tenantStatus, assistEnabled);\n\n    // Gets the current message to displayed based on activation state\n    const pendingStateDetails = getPendingActivationDetails(activationState, currentIndex);\n\n    // reload page at an interval to see if there is an update\n    useInterval(reloadAssistContext, requestOptInStatusTimer);\n\n    // While the user is waiting for tenant_status = \"creating\", we will show a different messages\n    // that will make it look like the activation is busy. This interval code with\n    // increment an index as long as the activate state is OPT_IN.\n    useInterval(() => {\n        if (\n            activationState === PendingActivationState.OPT_IN &&\n            currentIndex < optInActivationDetails.length\n        ) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    }, rotateMessageTimer);\n\n    // This is a timer that once triggered, we will show a contact support message since\n    // the activation is taking longer than expected.\n    useInterval(() => {\n        setActivationDelayed(true);\n    }, timeOutTimer);\n\n    return (\n        <AssistPendingContainer>\n            <WaitSpinner size=\"large\" />\n            <StyledHeading level={2} style={{ color: 'white' }}>\n                {pendingStateDetails?.title}\n            </StyledHeading>\n            <Subheading level={4}>{pendingStateDetails?.message}</Subheading>\n            <Subheading level={4}>{pendingStateDetails?.altMessage}</Subheading>\n            {isActivationDelayed && (\n                <>\n                    <br />\n                    <Subheading level={4}>\n                        It looks like the activation is taking longer than expected.\n                    </Subheading>\n                    <Subheading level={4}>\n                        If this persists,{' '}\n                        <ContactSupportLinkStyle\n                            to={createDocsURL('learnmore.splunkassist.overview')}\n                            openInNewContext\n                        >\n                            contact support\n                        </ContactSupportLinkStyle>\n                    </Subheading>\n                </>\n            )}\n        </AssistPendingContainer>\n    );\n};\n","import React, { FC } from 'react';\nimport Button from '@splunk/react-ui/Button';\nimport { ColumnCenter } from '../../common/components/Center';\nimport {\n    ErrorHeading,\n    ErrorTextContainer,\n    ErrorMessage,\n} from '../../common/components/errors/ErrorPage/ErrorPage.styles';\nimport { BrokenRobot } from '../../common/components/errors/ErrorPage/broken-robot';\n\nexport const ActivationFailed: FC = () => (\n    <ColumnCenter data-test=\"activation-failed\">\n        <BrokenRobot size={12} />\n        <ErrorTextContainer>\n            <ErrorHeading level={2}>Activation Failed</ErrorHeading>\n            <ErrorMessage>Something went wrong. Contact Splunk Support.</ErrorMessage>\n            <ErrorMessage>\n                <Button\n                    to=\"https://www.splunk.com/en_us/about-splunk/contact-us.html#customer-support\"\n                    appearance=\"primary\"\n                    openInNewContext\n                >\n                    Contact Splunk Support\n                </Button>\n            </ErrorMessage>\n        </ErrorTextContainer>\n    </ColumnCenter>\n);\n","import Message from '@splunk/react-ui/Message';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport { RemoteProps } from '@splunk/splunk-assist-remote-api';\nimport { variables } from '@splunk/themes';\nimport React, { FC, lazy, Suspense, useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport {\n    AssistPendingActivation,\n    getPendingActivationState,\n} from '../../onboarding/components/AssistPendingActivation/AssistPendingActivation';\nimport { ActivationFailed } from '../../onboarding/components/ActivationFailed';\nimport { isLoadingState } from '../hooks/useLoadAsync';\nimport { AssistStatuses, useAssist } from '../providers/Assist/AssistContext';\nimport { invalidTenantStatuses, TenantStatus } from '../types';\nimport Center from './Center';\nimport { PendingActivationState } from '../../onboarding/components/AssistPendingActivation/AssistPendingDetails';\nimport {\n    ONBOARDING_STATE_PENDING,\n    ONBOARDING_STATE_COMPLETED,\n} from '../../onboarding/common/OnboardingState';\n\nconst AssistEnabledRoutes = lazy(() => import('../routing/AssistEnabledRoutes'));\n\nconst AssistDisabledRoutes = lazy(() => import('../routing/AssistDisabledRoutes'));\n\nconst Loader: FC = () => (\n    <Center data-test=\"loader\">\n        <WaitSpinner size=\"large\" />\n    </Center>\n);\n\n/* This message is rendered within Wrapper.tsx\n   Wrapper.tsx applies a padding for the entire app. \n   We need the message to stretch the full width of the screen \n   (outside its parent container). \n*/\nconst GlobalMessage = styled(Message)`\n    margin-left: -${variables.spacingLarge};\n    margin-right: -${variables.spacingLarge};\n    margin-top: -${variables.spacingXSmall};\n    background-color: ${variables.backgroundColorFloating};\n`;\n\nconst AppContainer = styled.div`\n    overflow: auto;\n`;\n\nfunction isPending(optinStatus: AssistStatuses, tenantStatus: TenantStatus, assistEnabled: boolean): boolean {\n    const state = getPendingActivationState(optinStatus, tenantStatus, assistEnabled);\n    return state !== PendingActivationState.COMPLETED;\n}\n\n// sessionStorage only accepts strings\nconst GLOBAL_MESSAGE_HIDDEN = 'false';\nconst GLOBAL_MESSAGE_VISIBLE = 'true';\nconst GLOBAL_MESSAGE_STATUS_KEY = 'showGlobalMessage';\n\nexport const ONBOARD_STATE_LOCAL_STORAGE_KEY = 'onboardingStateLocalStorageKey';\n\nexport const AssistApp: FC<RemoteProps> = ({ context, isTest }) => {\n    const { optinStatus, loadingState, reload, tenantStatus, assistEnabled } = useAssist();\n    const [globalMessageStatus, setGlobalMessageStatus] = useState<string>(\n        sessionStorage.getItem(GLOBAL_MESSAGE_STATUS_KEY) || GLOBAL_MESSAGE_VISIBLE\n    );\n    const onRemoveGlobalMessage = useCallback(() => {\n        sessionStorage.setItem(GLOBAL_MESSAGE_STATUS_KEY, GLOBAL_MESSAGE_HIDDEN);\n        setGlobalMessageStatus(GLOBAL_MESSAGE_HIDDEN);\n    }, []);\n\n    const [onboardingState, setOnboardingState] = useState<string>(\n        sessionStorage.getItem(ONBOARD_STATE_LOCAL_STORAGE_KEY) || ONBOARDING_STATE_PENDING\n    );\n\n    const onUpdateOnboardingState = (state: string): void => {\n        sessionStorage.setItem(ONBOARD_STATE_LOCAL_STORAGE_KEY, state);\n        setOnboardingState(state);\n    };\n\n    if (isLoadingState(loadingState)) {\n        return <Loader />;\n    }\n\n    if (invalidTenantStatuses.includes(tenantStatus)) {\n        return <ActivationFailed />;\n    }\n\n    if (\n        (!assistEnabled || optinStatus === AssistStatuses.DISABLED) &&\n        onboardingState !== ONBOARDING_STATE_COMPLETED\n    ) {\n        return (\n            <Suspense fallback={<Loader />}>\n                <AssistDisabledRoutes\n                    context={context}\n                    isTest={isTest}\n                    onboardingState={onboardingState}\n                    onUpdateOnboarding={onUpdateOnboardingState}\n                />\n            </Suspense>\n        );\n    }\n\n    if (isPending(optinStatus, tenantStatus, assistEnabled)) {\n        return (\n            <Center>\n                <AssistPendingActivation reloadAssistContext={reload} />\n            </Center>\n        );\n    }\n\n    return (\n        <Suspense fallback={<Loader />}>\n            {globalMessageStatus === GLOBAL_MESSAGE_VISIBLE && (\n                <GlobalMessage\n                    data-test=\"global-message\"\n                    appearance=\"banner\"\n                    onRequestRemove={onRemoveGlobalMessage}\n                    type=\"info\"\n                >\n                    Indicator updates can take up to 1 hour to appear on this page.\n                </GlobalMessage>\n            )}\n            <AppContainer>\n                <AssistEnabledRoutes context={context} isTest={isTest} />\n            </AppContainer>\n        </Suspense>\n    );\n};\n","import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { useErrorHandler } from 'react-error-boundary';\nimport { useLoadAsync } from '../../hooks/useLoadAsync';\nimport { useServices } from '../ServiceProvider';\nimport { AssistContext, AssistStatuses, AssistValue } from './AssistContext';\n\n// Provider hook to create assist value\nfunction useProvideAssist(): AssistValue {\n    const handleError = useErrorHandler();\n    const {\n        supervisorService: { getIsAssistEnabled },\n    } = useServices();\n\n    const [lastRefresh, setLastRefresh] = useState(0);\n\n    const { loadingState, value } = useLoadAsync(\n        handleError,\n        'Error verifying Splunk Assist is enabled',\n        getIsAssistEnabled,\n        { alwaysReset: false, lastRefresh }\n    );\n    const reload = useCallback((): void => {\n        setLastRefresh((old) => (old < Number.MAX_SAFE_INTEGER - 10 ? old + 1 : 0));\n    }, []);\n\n    const assistValue: AssistValue = useMemo(\n        () => ({\n            connectivityOpen: value?.connectivityOpen || false,\n            loadingState,\n            reload,\n            optinStatus: value?.optinStatus || AssistStatuses.UNKNOWN,\n            tenantStatus: value?.tenantStatus || 'unknown',\n            assistEnabled: value?.assistEnabled || false,\n            sudOptinStatus: value?.sudOptinStatus || false,\n        }),\n        [\n            value?.connectivityOpen,\n            value?.optinStatus,\n            value?.tenantStatus,\n            loadingState,\n            reload,\n            value?.assistEnabled,\n            value?.sudOptinStatus,\n        ]\n    );\n\n    return assistValue;\n}\n\nexport const AssistProvider: FC = ({ children }) => {\n    const assist = useProvideAssist();\n    return <AssistContext.Provider value={assist}>{children}</AssistContext.Provider>;\n};\n","export function loadTenant(isSE: boolean): string | undefined {\n    if (isSE) {\n        // Cannot determine the tenant in SE.\n        return undefined;\n    }\n\n    // If not SE, extract tenant from URL\n    const path = window.location.pathname;\n    if (path) {\n        const parts = path.split('/');\n        if (parts.length > 0) {\n            return parts.pop() || '';\n        }\n    }\n    return undefined;\n}\n","import { createTelemetry, Telemetry } from '@splunk/skinny-web-telemetry';\nimport { createSplunkOtelPlugin } from '@splunk/skinny-web-opentelemetry-plugin';\nimport { useMemo } from 'react';\n\nenum ASSIST_ENV_TO_TELEMETRY_ENV {\n    playground = 'play',\n    production = 'prod',\n    staging = 'stage',\n}\n\nexport const setupTelemetry = (assistEnv: string): Telemetry | undefined => {\n    /* eslint-disable react-hooks/rules-of-hooks */\n    const memoizedTelemetry = useMemo(() => {\n        const env = ASSIST_ENV_TO_TELEMETRY_ENV[assistEnv];\n        if (env === undefined) {\n            return undefined;\n        }\n\n        const telemetry = createTelemetry();\n\n        const splunkOtelPlugin = createSplunkOtelPlugin({\n            // the current appType is set to 'ec' as that is the only type that supports Assist (which is an on-prem app)\n            // as of now. Skinny web telemetry is planning to create a new appType for on-prem apps as a part of their roadmap\n            appType: 'ec',\n            appName: 'splunk-assist-telemetry',\n            environment: env,\n            shouldRemovePII: true,\n            shouldDisableAutocapture: true,\n            shouldRemoveQueryParams: true,\n        });\n        telemetry.addPlugin(splunkOtelPlugin);\n\n        return telemetry;\n    }, [assistEnv]);\n\n    return memoizedTelemetry;\n};\n\nexport const captureDOMEvent = (targetElement: HTMLElement | null, telemetry?: Telemetry): void => {\n    let dataFound = '';\n    let currentElem = targetElement;\n    while (currentElem) {\n        if (currentElem.dataset.telemetryData) {\n            dataFound = currentElem.dataset.telemetryData;\n            break;\n        }\n        currentElem = currentElem?.parentElement;\n    }\n\n    if (dataFound) {\n        const { eventName, ...attributes } = JSON.parse(dataFound);\n        if (!eventName) {\n            return;\n        }\n        telemetry?.track(eventName, attributes);\n    }\n};\n\nexport const listenForDOMEvents = (telemetry: Telemetry, element: HTMLElement | null): void => {\n    // add listener for all onclick dom events\n    const elementToListen = element || document;\n    elementToListen.addEventListener('click', (e) => captureDOMEvent(e.target as HTMLElement, telemetry));\n\n    // in the future, we may want to add telemetry to onchange events. Debouncing is not needed\n    // for textfields as DOM onchange events only trigger when the user focuses off the element\n    // document.addEventListener('change', (e) => captureDOMEvent(e.target as HTMLElement));\n};\n\nexport default {\n    setupTelemetry,\n    captureDOMEvent,\n    listenForDOMEvents,\n};\n","import { Telemetry } from '@splunk/skinny-web-telemetry';\nimport { createContext, useContext } from 'react';\n\nexport const TelemetryContext = createContext<TelemetryContextProps>({});\n\nexport const TelemetryContextProvider = TelemetryContext.Provider;\n\nexport const useTelemetry = (): Telemetry | undefined => {\n    return useContext(TelemetryContext).telemetry;\n};\n\nexport interface TelemetryContextProps {\n    telemetry?: Telemetry;\n}\n","import React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { useErrorHandler } from 'react-error-boundary';\nimport { listenForDOMEvents, setupTelemetry } from './utils';\nimport { useLoadAsync } from '../ui/common/hooks/useLoadAsync';\nimport { useServices } from '../ui/common/providers/ServiceProvider';\nimport { TelemetryContextProvider } from './TelemetryContext';\n\ninterface TelemetryProviderProps {\n    /**\n     * if disableTelemetry is set, telemetry will not be collected\n     */\n    disableTelemetry: boolean;\n}\n\nexport const TelemetryProvider: FC<TelemetryProviderProps> = ({ disableTelemetry, children }) => {\n    const { confService, accessService } = useServices();\n    // state used as flag to only call listenForDOMEvents and telemetry.identify once\n    const [called, setCalled] = useState(false);\n    const providerDOM = useRef<HTMLDivElement>(null);\n\n    // Access API call\n    const handleError = useErrorHandler();\n    const userContext = useLoadAsync(\n        useCallback(() => {\n            return (): void => {};\n        }, []),\n        'Error loading current context',\n        useCallback(() => {\n            return accessService.getCurrentContext();\n        }, [accessService])\n    );\n\n    // Conf API call\n    const assistEnv = useLoadAsync(\n        handleError,\n        'Error loading assist environment info',\n        useCallback(() => {\n            return confService.getAssistEnv();\n        }, [confService])\n    );\n\n    const telemetry = disableTelemetry ? undefined : setupTelemetry(assistEnv.value || '');\n    useEffect(() => {\n        if (telemetry && !called && userContext.value?.email) {\n            telemetry.identify({\n                // pass in window.location.host in order to obfuscate the IP address\n                tenant: window.location.host,\n                user: userContext.value.email,\n            });\n            listenForDOMEvents(telemetry, providerDOM.current);\n            setCalled(true);\n        }\n    }, [telemetry, userContext, setCalled, called]);\n\n    return (\n        <TelemetryContextProvider value={{ telemetry }}>\n            <div ref={providerDOM}>{children}</div>\n        </TelemetryContextProvider>\n    );\n};\n","import { RemoteProps } from '@splunk/splunk-assist-remote-api';\nimport React, { FC } from 'react';\nimport { HashRouter, useHistory } from 'react-router-dom';\nimport { AssistApp } from '../common/components/AssistApp';\nimport { Wrapper } from '../common/components/Wrapper';\nimport { AssistProvider } from '../common/providers/Assist/AssistProvider';\nimport { NavUtilsProvider } from '../common/providers/NavUtilsProvider';\nimport { RepoProvider } from '../common/providers/RepoProvider';\nimport { ServiceProvider } from '../common/providers/ServiceProvider';\nimport { loadTenant } from '../common/utils/tenant';\nimport { TelemetryProvider } from '../../telemetry/TelemetryProvider';\n\nexport const AssistRoutes: FC<RemoteProps> = ({ context, isTest }) => {\n    const history = useHistory();\n\n    // Set shouldUseSCS to true below to send requests directly to SCS Playground for testing\n    return (\n        <ServiceProvider>\n            <RepoProvider testFlags={{ shouldUseSCS: false, tenant: loadTenant(context.isSE) }}>\n                <NavUtilsProvider history={history}>\n                    <Wrapper colorScheme=\"dark\">\n                        <TelemetryProvider disableTelemetry={isTest}>\n                            <AssistProvider>\n                                <AssistApp context={context} isTest={isTest} />\n                            </AssistProvider>\n                        </TelemetryProvider>\n                    </Wrapper>\n                </NavUtilsProvider>\n            </RepoProvider>\n        </ServiceProvider>\n    );\n};\n\nexport const AssistRouter: FC<RemoteProps> = (props) => {\n    return (\n        <HashRouter>\n            <AssistRoutes {...props} />\n        </HashRouter>\n    );\n};\n\nexport default AssistRouter;\n"],"names":["createHttpSupervisorService","apiClient","activate","async","code","licenseId","RequestError","response","post","method","path","body","license_id","status","message","valid","error","getIsAssistEnabled","get","connectivityOpen","context","network_connectivity","optinStatus","assist_optin","tenantStatus","tenant_status","assistEnabled","assist_enabled","sudOptinStatus","sud_optin","createHTTPLicenserService","getLicenseGUID","queryParams","output_mode","content","entry","addonGuids","reduce","add_ons","guids","addon","parameters","guid","push","filter","includes","toLowerCase","createHTTPConfService","getAssistEnv","find","value","name","e","createHTTPAccessService","getCurrentContext","username","email","ServicesContext","createContext","ServiceProvider","children","services","useMemo","APIClient","shouldUseSCS","supervisorService","licenserService","confService","accessService","createHttpServices","Provider","useServices","useContext","Error","ONBOARDING_STATE_PENDING","ONBOARDING_STATE_RUNNING","ONBOARDING_STATE_COMPLETED","useInterval","callback","delay","intervalRef","useRef","savedCallback","useEffect","current","window","setInterval","clearInterval","AssistPendingContainer","styled","StyledHeading","Heading","variables","Subheading","ContactSupportLinkStyle","Link","PendingActivationState","pendingActivationTitle","activatingAssistTitle","securingConnectionsDetails","title","optInActivationDetails","altMessage","getPendingActivationState","TenantStatusState","AssistStatuses","OPT_IN","INITIAL","TENANT_CREATING","COMPLETED","AssistPendingActivation","reloadAssistContext","currentIndex","setCurrentIndex","useState","isActivationDelayed","setActivationDelayed","useAssist","activationState","pendingStateDetails","state","index","length","getNextOptInActivationDetails","getPendingActivationDetails","size","level","style","color","to","createDocsURL","openInNewContext","ActivationFailed","appearance","AssistEnabledRoutes","lazy","AssistDisabledRoutes","Loader","Center","GlobalMessage","Message","AppContainer","GLOBAL_MESSAGE_HIDDEN","GLOBAL_MESSAGE_VISIBLE","GLOBAL_MESSAGE_STATUS_KEY","ONBOARD_STATE_LOCAL_STORAGE_KEY","AssistApp","isTest","loadingState","reload","globalMessageStatus","setGlobalMessageStatus","sessionStorage","getItem","onRemoveGlobalMessage","useCallback","setItem","onboardingState","setOnboardingState","isLoadingState","invalidTenantStatuses","isPending","Suspense","fallback","onRequestRemove","type","onUpdateOnboarding","AssistProvider","assist","handleError","useErrorHandler","lastRefresh","setLastRefresh","useLoadAsync","alwaysReset","old","Number","MAX_SAFE_INTEGER","useProvideAssist","AssistContext","loadTenant","isSE","location","pathname","parts","split","pop","ASSIST_ENV_TO_TELEMETRY_ENV","listenForDOMEvents","telemetry","element","document","addEventListener","targetElement","dataFound","currentElem","dataset","telemetryData","parentElement","JSON","parse","eventName","attributes","track","captureDOMEvent","target","TelemetryContextProvider","TelemetryProvider","disableTelemetry","called","setCalled","providerDOM","userContext","assistEnv","undefined","env","createTelemetry","splunkOtelPlugin","createSplunkOtelPlugin","appType","appName","environment","shouldRemovePII","shouldDisableAutocapture","shouldRemoveQueryParams","addPlugin","setupTelemetry","identify","tenant","host","user","ref","AssistRoutes","history","useHistory","RepoProvider","testFlags","NavUtilsProvider","Wrapper","colorScheme","AssistRouter","props","HashRouter"],"sourceRoot":""}