{"version":3,"sources":["webpack://splunk-assist-main/./src/ui/common/components/errors/UnknownPath.tsx","webpack://splunk-assist-main/./src/ui/common/utils/url.ts","webpack://splunk-assist-main/./src/ui/routers/InspectorRoutes.tsx","webpack://splunk-assist-main/./src/ui/common/providers/AssistFeatureFlagsProvider.tsx","webpack://splunk-assist-main/./src/ui/common/routing/AssistEnabledRoutes.tsx"],"names":["UnknownPath","pathname","useLocation","parseSelectedPage","pageNumber","parsedNumber","parseInt","Number","isNaN","InspectorRoutes","path","useRouteMatch","INSPECTORS","map","name","component","filterURLParam","scopeFilterParam","sortFilterParam","key","render","props","filters","queryParams","level","selectedPage","page","scopeFilter","sortFilter","getFilters","parse","location","search","React","createElement","FeatureFlagsContext","createContext","AssistFeatureFlagProvider","children","Provider","value","AssistEnabledRoutes","context","OVERVIEW_PATH","DEPRECATED_PATH","category","node","nodeLevel","role","nodeRole","nodeTitle","indicatorNameFilter","CATEGORIES","indexOf","joinQuery","generatePath","to","Overview","INSPECTOR_PATH","from"],"mappings":";;;;;kOAGO,MAAMA,EAAkB,KAC3B,MAAM,SAAEC,GAAaC,wBACrB,OAAO,oDAAgBD,ICLdE,EAAqBC,IAC9B,MAAMC,EAAeC,SAASF,EAAY,IAC1C,OAAIG,OAAOC,MAAMH,IAAiBA,EAAe,EACtC,EAEJA,G,6HCIJ,MAAMI,EAAsB,KAC/B,MAAM,KAAEC,GAASC,0BA0CjB,OACI,kBAAC,SAAD,mEACKC,IAAWC,IA3BA,EAChBC,OACAC,YACAC,iBACAC,mBACAC,qBAGI,kBAAC,QAAD,CACIC,IAAKL,EACLJ,KAASA,EAAL,IAAaI,EACjBM,OAASC,IACL,MACMC,EA5BH,EACfC,EACAP,EACAC,EACAC,KAEO,CACHM,MAAOD,EAAYC,MACnB,CAACR,GAAiBO,EAAYP,GAC9BS,aAAcF,EAAYG,KAAOvB,EAAkBoB,EAAYG,MAAkB,EACjFC,YAAaV,EAAmBM,EAAYN,GAAoB,GAChEW,WAAYV,EAAkBK,EAAYL,GAAmB,KAiBrCW,CADIC,gBAAMT,EAAMU,SAASC,QAGrChB,EACAC,EACAC,GAEJ,OAAOe,IAAMC,cAAcnB,EAAW,CAAEO,aAXhD,qEAoBA,kBAAC,QAAD,CAAOP,UAAWf,EAAlB,sE,4BClDL,MAAMmC,EAAsBC,wBAAmC,MAGzDC,EAAgC,EAAGC,cAGrC,kBAACH,EAAoBI,SAArB,CAA8BC,MAFhB,GAEd,iC,mIAAA,gCAAoDF,G,gICSxD,MAAMG,EAAuC,EAAGC,aAE/C,kBAACL,EAAD,mEACI,kBAAC,SAAD,oEACI,kBAAC,QAAD,CACI3B,KAAI,KAAOiC,IAAP,KAAyBC,IAAzB,IACJxB,OAASC,IACL,MAAME,EAAcO,gBAAMT,EAAMU,SAASC,QACnCV,EAAU,CACZuB,SAAUtB,EAAYsB,SACtBC,KAAM,CACFtB,MAAOD,EAAYwB,UACnBC,KAAMzB,EAAY0B,SAClBnC,KAAMS,EAAY2B,WAEtBzB,aAAcF,EAAYG,KACpBvB,EAAkBoB,EAAYG,MAC9B,EACNyB,oBAAqB5B,EAAY4B,qBAGrC,IA5BON,EA4BoBvB,EAAQuB,aA1B5CO,IAAWC,QAAQR,IAAyB,GA0BW,QAEnCtB,EAAYsB,SACnB,MAAMnC,EAAO4C,YAAUC,uBAAaZ,IAAe,IAAKpB,GACxD,OAAO,kBAAC,WAAD,CAAUiC,GAAI9C,EAAd,oEAhCnC,IAA+BmC,EAmCP,OAAO,kBAACY,EAAA,EAAD,CAAUf,QAASA,EAASpB,QAASA,EAArC,qEAxBf,oEA2BA,kBAAC,QAAD,CAAOZ,KAAI,IAAMgD,IAAjB,mEACI,kBAACjD,EAAD,sEAEJ,kBAAC,WAAD,CAAUkD,KAAK,IAAIH,GAAE,IAAMb,IAA3B,oEA/BJ,IAgCI,kBAAC,QAAD,CAAO5B,UAAWf,EAAlB,sEAMDyC","file":"5.5.js?d10e1be72a06377d1cde","sourcesContent":["import React, { FC } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport const UnknownPath: FC = () => {\n    const { pathname } = useLocation();\n    return <>Unknown path {pathname}</>;\n};\n","export const parseSelectedPage = (pageNumber: string): number => {\n    const parsedNumber = parseInt(pageNumber, 10);\n    if (Number.isNaN(parsedNumber) || parsedNumber < 0) {\n        return 1;\n    }\n    return parsedNumber;\n};\n","import { parse } from 'query-string';\nimport React, { FC } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { UnknownPath } from '../common/components/errors/UnknownPath';\nimport { InspectorParams, Level } from '../common/types';\nimport { InspectorFilters } from '../inspectors/common/types/InspectorFilters';\nimport { parseSelectedPage } from '../common/utils/url';\nimport { INSPECTORS } from '../common/utils/constants';\n\nexport const InspectorRoutes: FC = () => {\n    const { path } = useRouteMatch();\n\n    const getFilters = (\n        queryParams,\n        filterURLParam: string,\n        scopeFilterParam: string,\n        sortFilterParam: string\n    ): InspectorFilters => {\n        return {\n            level: queryParams.level as Level,\n            [filterURLParam]: queryParams[filterURLParam],\n            selectedPage: queryParams.page ? parseSelectedPage(queryParams.page as string) : 1,\n            scopeFilter: scopeFilterParam ? queryParams[scopeFilterParam] : '',\n            sortFilter: sortFilterParam ? queryParams[sortFilterParam] : '',\n        };\n    };\n\n    const createRoute = ({\n        name,\n        component,\n        filterURLParam,\n        scopeFilterParam,\n        sortFilterParam,\n    }): JSX.Element => {\n        return (\n            <Route\n                key={name}\n                path={`${path}/${name}`}\n                render={(props): JSX.Element => {\n                    const queryParams = parse(props.location.search) as InspectorParams;\n                    const filters = getFilters(\n                        queryParams,\n                        filterURLParam,\n                        scopeFilterParam,\n                        sortFilterParam\n                    );\n                    return React.createElement(component, { filters });\n                }}\n            />\n        );\n    };\n\n    return (\n        <Switch>\n            {INSPECTORS.map(createRoute)}\n            <Route component={UnknownPath} />\n        </Switch>\n    );\n};\n","import React, { createContext, FC, useContext } from 'react';\n\n// eslint-disable-next-line  @typescript-eslint/no-empty-interface\nexport interface FeatureFlags {}\n\nexport const FeatureFlagsContext = createContext<FeatureFlags | null>(null);\n\n// Prefix with 'Assist' because there is an existing SUI package with same name\nexport const AssistFeatureFlagProvider: FC = ({ children }) => {\n    const featureFlags = {};\n\n    return <FeatureFlagsContext.Provider value={featureFlags}>{children}</FeatureFlagsContext.Provider>;\n};\n\nexport const useFeatureFlags = (): FeatureFlags => {\n    const featureFlags = useContext(FeatureFlagsContext);\n    if (!featureFlags) {\n        throw new Error('useFeatureFlags must be called within AssistFeatureFlagProvider');\n    }\n    return featureFlags;\n};\n","import { RemoteProps } from '@splunk/splunk-assist-remote-api';\nimport { parse } from 'query-string';\nimport React, { FC } from 'react';\nimport { generatePath, Redirect, Route, Switch } from 'react-router-dom';\nimport { Filters, Overview } from '../../overview/containers/Overview';\nimport { InspectorRoutes } from '../../routers/InspectorRoutes';\nimport { UnknownPath } from '../components/errors/UnknownPath';\nimport { joinQuery } from '../providers/NavUtilsProvider';\nimport { CATEGORIES, Category } from '../types';\nimport { DEPRECATED_PATH, INSPECTOR_PATH, OVERVIEW_PATH } from './routes';\nimport { parseSelectedPage } from '../utils/url';\nimport { AssistFeatureFlagProvider } from '../providers/AssistFeatureFlagsProvider';\n\nfunction isValidCategoryFilter(category: string): boolean {\n    if (category) {\n        return CATEGORIES.indexOf(category as Category) >= 0;\n    }\n    return true;\n}\n\nexport const AssistEnabledRoutes: FC<RemoteProps> = ({ context }) => {\n    return (\n        <AssistFeatureFlagProvider>\n            <Switch>\n                <Route\n                    path={`(/${OVERVIEW_PATH}|/${DEPRECATED_PATH})`}\n                    render={(props): JSX.Element => {\n                        const queryParams = parse(props.location.search);\n                        const filters = {\n                            category: queryParams.category,\n                            node: {\n                                level: queryParams.nodeLevel,\n                                role: queryParams.nodeRole,\n                                name: queryParams.nodeTitle,\n                            },\n                            selectedPage: queryParams.page\n                                ? parseSelectedPage(queryParams.page as string)\n                                : 1,\n                            indicatorNameFilter: queryParams.indicatorNameFilter,\n                        } as Filters;\n\n                        if (!isValidCategoryFilter(filters.category)) {\n                            // if category filter is invalid, redirect to empty selection (i.e. \"all\")\n                            delete queryParams.category;\n                            const path = joinQuery(generatePath(OVERVIEW_PATH, {}), queryParams);\n                            return <Redirect to={path} />;\n                        }\n\n                        return <Overview context={context} filters={filters} />;\n                    }}\n                />\n                <Route path={`/${INSPECTOR_PATH}`}>\n                    <InspectorRoutes />\n                </Route>\n                <Redirect from=\"/\" to={`/${OVERVIEW_PATH}`} />;\n                <Route component={UnknownPath} />\n            </Switch>\n        </AssistFeatureFlagProvider>\n    );\n};\n\nexport default AssistEnabledRoutes;\n"],"sourceRoot":""}